/*
 * This file was generated by dbusxml2cpp version 0.6
 * Command line was: dbusxml2cpp -N ../dbus/introspection/nm-exported-connection.xml -a exportedconnection
 *
 * dbusxml2cpp is Copyright (C) 2006 Trolltech ASA. All rights reserved.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "exportedconnection.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <KDebug>
#include "busconnection.h"

/*
 * Implementation of adaptor class ConnectionAdaptor
 */

ConnectionAdaptor::ConnectionAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

ConnectionAdaptor::~ConnectionAdaptor()
{
    // destructor
}

void ConnectionAdaptor::Delete()
{
    // handle method call org.freedesktop.NetworkManagerSettings.Connection.Delete
    QMetaObject::invokeMethod(parent(), "Delete");
}

QVariantMapMap ConnectionAdaptor::GetSettings()
{
    // handle method call org.freedesktop.NetworkManagerSettings.Connection.GetSettings
    QVariantMapMap settings;
    QMetaObject::invokeMethod(parent(), "GetSettings", Q_RETURN_ARG(QVariantMapMap, settings));
    return settings;
}

void ConnectionAdaptor::Update(const QVariantMapMap &properties)
{
    // handle method call org.freedesktop.NetworkManagerSettings.Connection.Update
    QMetaObject::invokeMethod(parent(), "Update", Q_ARG(QVariantMapMap, properties));
}

/*
 * Implementation of adaptor class SecretsAdaptor
 */

SecretsAdaptor::SecretsAdaptor(BusConnection *parent)
    : QDBusAbstractAdaptor(parent), m_connection(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

SecretsAdaptor::~SecretsAdaptor()
{
    // destructor
}

QVariantMapMap SecretsAdaptor::GetSecrets(const QString &setting_name, const QStringList &hints, bool request_new, const QDBusMessage& message)
{
    // handle method call org.freedesktop.NetworkManagerSettings.Connection.Secrets.GetSecrets
    kDebug();
    QVariantMapMap secrets = m_connection->GetSecrets(setting_name, hints, request_new, message);
    //QMetaObject::invokeMethod(parent(), "GetSecrets", Q_RETURN_ARG(QVariantMapMap, secrets), Q_ARG(QString, setting_name), Q_ARG(QStringList, hints), Q_ARG(bool, request_new));
    return secrets;
}

