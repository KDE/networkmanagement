/*
 * This file was generated by dbusxml2cpp version 0.6
 * Command line was: dbusxml2cpp -N ../dbus/introspection/nm-exported-connection.xml -a exportedconnection
 *
 * dbusxml2cpp is Copyright (C) 2006 Trolltech ASA. All rights reserved.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef EXPORTEDCONNECTION_H_1223875465
#define EXPORTEDCONNECTION_H_1223875465

#include <QtCore/QObject>
#include <QtDBus/QtDBus>

#include "marshalarguments.h"

template<class T> class QList;
template<class Key, class Value> class QMap;
class QString;
class QStringList;
class QVariant;

//HAND-EDIT
class BusConnection;
/*
 * Adaptor class for interface org.freedesktop.NetworkManagerSettings.Connection
 */
class ConnectionAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "org.freedesktop.NetworkManagerSettings.Connection")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"org.freedesktop.NetworkManagerSettings.Connection\" >\n"
"    <tp:docstring>\n"
"            Represents a single network connection configuration.\n"
"        </tp:docstring>\n"
"    <method name=\"Update\" >\n"
"      <tp:docstring>\n"
"            Update the connection.\n"
"          </tp:docstring>\n"
"      <annotation value=\"impl_exported_connection_update\" name=\"org.freedesktop.DBus.GLib.CSymbol\" />\n"
"      <annotation value=\"\" name=\"org.freedesktop.DBus.GLib.Async\" />\n"
"      <annotation value=\"QVariantMapMap\" name=\"com.trolltech.QtDBus.QtTypeName.In0\" />\n"
"      <arg direction=\"in\" type=\"a{sa{sv}}\" name=\"properties\" >\n"
"        <tp:docstring>\n"
"              New connection properties.\n"
"            </tp:docstring>\n"
"      </arg>\n"
"    </method>\n"
"    <method name=\"Delete\" >\n"
"      <tp:docstring>\n"
"            Delete the connection.\n"
"          </tp:docstring>\n"
"      <annotation value=\"impl_exported_connection_delete\" name=\"org.freedesktop.DBus.GLib.CSymbol\" />\n"
"      <annotation value=\"\" name=\"org.freedesktop.DBus.GLib.Async\" />\n"
"    </method>\n"
"    <method name=\"GetSettings\" >\n"
"      <tp:docstring>\n"
"                Get the settings maps describing this object.\n"
"            </tp:docstring>\n"
"      <annotation value=\"impl_exported_connection_get_settings\" name=\"org.freedesktop.DBus.GLib.CSymbol\" />\n"
"      <arg direction=\"out\" tp:type=\"String_String_Variant_Map_Map\" type=\"a{sa{sv}}\" name=\"settings\" >\n"
"        <annotation value=\"QVariantMapMap\" name=\"com.trolltech.QtDBus.QtTypeName.Out0\" />\n"
"        <tp:docstring>\n"
"                    The nested settings maps describing this object.\n"
"                </tp:docstring>\n"
"      </arg>\n"
"    </method>\n"
"    <signal name=\"Updated\" >\n"
"      <tp:docstring>\n"
"                Emitted when some settings changed.\n"
"            </tp:docstring>\n"
"      <arg tp:type=\"String_String_Variant_Map_Map\" type=\"a{sa{sv}}\" name=\"settings\" >\n"
"        <annotation value=\"QVariantMapMap\" name=\"com.trolltech.QtDBus.QtTypeName.In0\" />\n"
"        <tp:docstring>\n"
"                    Contains the changed settings.\n"
"                </tp:docstring>\n"
"      </arg>\n"
"    </signal>\n"
"    <signal name=\"Removed\" >\n"
"      <tp:docstring>\n"
"                Emitted when this settings object was removed. FIXME: Is this emitted after it was removed or when it is about to be removed?  If after removed, then different semantics to Device removed.  if prior to removal, should be called AboutToBeRemoved.\n"
"            </tp:docstring>\n"
"    </signal>\n"
"  </interface>\n"
        "")
public:
    ConnectionAdaptor(QObject *parent);
    virtual ~ConnectionAdaptor();

public: // PROPERTIES
public Q_SLOTS: // METHODS
    void Delete();
    QVariantMapMap GetSettings();
    void Update(const QVariantMapMap &properties);
Q_SIGNALS: // SIGNALS
    void Removed();
    void Updated(const QVariantMapMap &settings);
};

/*
 * Adaptor class for interface org.freedesktop.NetworkManagerSettings.Connection.Secrets
 */
class SecretsAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "org.freedesktop.NetworkManagerSettings.Connection.Secrets")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"org.freedesktop.NetworkManagerSettings.Connection.Secrets\" >\n"
"    <tp:docstring>\n"
"            Secrets have a separate interface so that they can be locked down.\n"
"        </tp:docstring>\n"
"    <method name=\"GetSecrets\" >\n"
"      <tp:docstring>\n"
"                Get the secrets encapsulated in this object.\n"
"            </tp:docstring>\n"
"      <annotation value=\"impl_exported_connection_get_secrets\" name=\"org.freedesktop.DBus.GLib.CSymbol\" />\n"
"      <annotation value=\"\" name=\"org.freedesktop.DBus.GLib.Async\" />\n"
"      <arg direction=\"in\" type=\"s\" name=\"setting_name\" >\n"
"        <tp:docstring>\n"
"                    Name of the setting to return.\n"
"                </tp:docstring>\n"
"      </arg>\n"
"      <arg direction=\"in\" type=\"as\" name=\"hints\" >\n"
"        <tp:docstring>\n"
"                    Array of strings of key names in the Setting for which NM thinks\n"
"                    a secrets may be required.\n"
"                </tp:docstring>\n"
"      </arg>\n"
"      <arg direction=\"in\" type=\"b\" name=\"request_new\" >\n"
"        <tp:docstring>\n"
"                    Indicates whether new secrets should be requested or if the request can be fulfilled from storage.\n"
"                </tp:docstring>\n"
"      </arg>\n"
"      <arg direction=\"out\" tp:type=\"String_String_Variant_Map_Map\" type=\"a{sa{sv}}\" name=\"secrets\" >\n"
"        <annotation value=\"QVariantMapMap\" name=\"com.trolltech.QtDBus.QtTypeName.Out0\" />\n"
"        <tp:docstring>\n"
"                    Nested settings maps containing secrets.  Each setting MUST contain at least the 'name' field, containing the name of the setting, and one or more secrets.\n"
"                </tp:docstring>\n"
"      </arg>\n"
"    </method>\n"
"  </interface>\n"
        "")
public:
    //HAND-EDIT
    SecretsAdaptor(BusConnection *parent);
    virtual ~SecretsAdaptor();

public: // PROPERTIES
public Q_SLOTS: // METHODS
    //HAND-EDIT
    QVariantMapMap GetSecrets(const QString &setting_name, const QStringList &hints, bool request_new, const QDBusMessage &message);
Q_SIGNALS: // SIGNALS
//HAND-EDIT
private:
    BusConnection * m_connection;
};

#endif
