/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -N -m -i generic-types.h -p nm-ip6-configinterface /home/jgrulich/projects/libnm-qt/dbus/introspection/nm-ip6-config.xml
 *
 * qdbusxml2cpp is Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef NM_IP6_CONFIG_INTERFACE_H
#define NM_IP6_CONFIG_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "settings/ipv6dbus.h"

// Need ito export the class to use it externally (in the applet)
#include "knm_export.h"

/*
 * Proxy class for interface org.freedesktop.NetworkManager.IP6Config
 */
class KNM_EXPORT OrgFreedesktopNetworkManagerIP6ConfigInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.NetworkManager.IP6Config"; }

public:
    OrgFreedesktopNetworkManagerIP6ConfigInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgFreedesktopNetworkManagerIP6ConfigInterface();

    Q_PROPERTY(QList<IpV6AddressMap> Addresses READ addresses)
    inline QList<IpV6AddressMap> addresses() const
    { return qvariant_cast< QList<IpV6AddressMap> >(property("Addresses")); }

    Q_PROPERTY(QStringList Domains READ domains)
    inline QStringList domains() const
    { return qvariant_cast< QStringList >(property("Domains")); }

    Q_PROPERTY(QList<QByteArray> Nameservers READ nameservers)
    inline QList<QByteArray> nameservers() const
    { return qvariant_cast< QList<QByteArray> >(property("Nameservers")); }

    Q_PROPERTY(QList<IpV6RouteMap> Routes READ routes)
    inline QList<IpV6RouteMap> routes() const
    { return qvariant_cast< QList<IpV6RouteMap> >(property("Routes")); }

public Q_SLOTS: // METHODS
Q_SIGNALS: // SIGNALS
};

#endif
