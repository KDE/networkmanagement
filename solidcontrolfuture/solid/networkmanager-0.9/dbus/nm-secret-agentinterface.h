/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -N -m -p nm-secret-agentinterface introspection/nm-secret-agent.xml
 *
 * qdbusxml2cpp is Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef NM_SECRET_AGENTINTERFACE_H_1305479392
#define NM_SECRET_AGENTINTERFACE_H_1305479392

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.freedesktop.NetworkManager.SecretAgent
 */
class OrgFreedesktopNetworkManagerSecretAgentInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.NetworkManager.SecretAgent"; }

public:
    OrgFreedesktopNetworkManagerSecretAgentInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgFreedesktopNetworkManagerSecretAgentInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> CancelGetSecrets(const QDBusObjectPath &connection_path, const QString &setting_name)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(connection_path) << qVariantFromValue(setting_name);
        return asyncCallWithArgumentList(QLatin1String("CancelGetSecrets"), argumentList);
    }

    inline QDBusPendingReply<> DeleteSecrets(const QVariantMap &connection, const QDBusObjectPath &connection_path)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(connection) << qVariantFromValue(connection_path);
        return asyncCallWithArgumentList(QLatin1String("DeleteSecrets"), argumentList);
    }

    inline QDBusPendingReply<QVariantMapMap> GetSecrets(const QVariantMapMap &connection, const QDBusObjectPath &connection_path, const QString &setting_name, const QStringList &hints, uint flags)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(connection) << qVariantFromValue(connection_path) << qVariantFromValue(setting_name) << qVariantFromValue(hints) << qVariantFromValue(flags);
        return asyncCallWithArgumentList(QLatin1String("GetSecrets"), argumentList);
    }

    inline QDBusPendingReply<> SaveSecrets(const QVariantMapMap &connection, const QDBusObjectPath &connection_path)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(connection) << qVariantFromValue(connection_path);
        return asyncCallWithArgumentList(QLatin1String("SaveSecrets"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

#endif
