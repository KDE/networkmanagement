/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -N -m -p nm-vpn-plugininterface introspection/nm-vpn-plugin.xml
 *
 * qdbusxml2cpp is Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef NM_VPN_PLUGININTERFACE_H_1305479917
#define NM_VPN_PLUGININTERFACE_H_1305479917

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

#include "generic-types.h"

/*
 * Proxy class for interface org.freedesktop.NetworkManager.VPN.Plugin
 */
class OrgFreedesktopNetworkManagerVPNPluginInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.NetworkManager.VPN.Plugin"; }

public:
    OrgFreedesktopNetworkManagerVPNPluginInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgFreedesktopNetworkManagerVPNPluginInterface();

    Q_PROPERTY(uint State READ state)
    inline uint state() const
    { return qvariant_cast< uint >(property("State")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> Connect(const QVariantMapMap &connection)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(connection);
        return asyncCallWithArgumentList(QLatin1String("Connect"), argumentList);
    }

    inline QDBusPendingReply<> Disconnect()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Disconnect"), argumentList);
    }

    inline QDBusPendingReply<QString> NeedSecrets(const QVariantMapMap &settings)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(settings);
        return asyncCallWithArgumentList(QLatin1String("NeedSecrets"), argumentList);
    }

    inline QDBusPendingReply<> SetFailure(const QString &reason)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(reason);
        return asyncCallWithArgumentList(QLatin1String("SetFailure"), argumentList);
    }

    inline QDBusPendingReply<> SetIp4Config(const QVariantMap &config)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(config);
        return asyncCallWithArgumentList(QLatin1String("SetIp4Config"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void Failure(uint reason);
    void Ip4Config(const QVariantMap &ip4config);
    void LoginBanner(const QString &banner);
    void StateChanged(uint state);
};

#endif
