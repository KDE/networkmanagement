Only in settings: 802-11-wireless.cpp~
diff -ur origsettings//802-11-wirelessdbus.h settings/802-11-wirelessdbus.h
--- origsettings//802-11-wirelessdbus.h	2009-01-23 18:41:34.000000000 +0100
+++ settings/802-11-wirelessdbus.h	2009-01-23 18:17:03.000000000 +0100
@@ -3,7 +3,7 @@
 #ifndef KNM_WIRELESSDBUS_H
 #define KNM_WIRELESSDBUS_H
 
-#include <nm-setting-802-11-wireless.h>
+#include <nm-setting-wireless.h>
 
 #include <kdebug.h>
 #include <kcoreconfigskeleton.h>
Only in settings: 802-11-wirelessdbus.h~
Only in settings: 802-11-wirelesspersistence.cpp~
diff -ur origsettings//802-11-wireless-securitydbus.h settings/802-11-wireless-securitydbus.h
--- origsettings//802-11-wireless-securitydbus.h	2009-01-23 18:41:34.000000000 +0100
+++ settings/802-11-wireless-securitydbus.h	2009-01-23 18:17:03.000000000 +0100
@@ -3,7 +3,7 @@
 #ifndef KNM_WIRELESSSECURITYDBUS_H
 #define KNM_WIRELESSSECURITYDBUS_H
 
-#include <nm-setting-802-11-wireless-security.h>
+#include <nm-setting-wireless-security.h>
 
 #include <kdebug.h>
 #include <kcoreconfigskeleton.h>
Only in settings: 802-11-wireless-securitydbus.h~
diff -ur origsettings//802-1x.cpp settings/802-1x.cpp
--- origsettings//802-1x.cpp	2009-01-23 18:41:34.000000000 +0100
+++ settings/802-1x.cpp	2009-01-23 18:17:03.000000000 +0100
@@ -5,7 +5,8 @@
 
 using namespace Knm;
 
-Security8021xSetting::Security8021xSetting() : Setting(Setting::Security8021x)
+Security8021xSetting::Security8021xSetting() : Setting(Setting::Security8021x),
+    mPhase1peapver(0), mPhase2autheap(0)
 {
 }
 
Only in settings: 802-1x.cpp~
diff -ur origsettings//802-1xdbus.cpp settings/802-1xdbus.cpp
--- origsettings//802-1xdbus.cpp	2009-01-23 18:41:34.000000000 +0100
+++ settings/802-1xdbus.cpp	2009-01-23 18:35:59.000000000 +0100
@@ -82,24 +82,41 @@
 {
   QVariantMap map;
   Security8021xSetting * setting = static_cast<Security8021xSetting *>(m_setting);
-  map.insert("eap", setting->eap());
-  map.insert("identity", setting->identity());
-  map.insert(QLatin1String(NM_SETTING_802_1X_ANONYMOUS_IDENTITY), setting->anonymousidentity());
-  map.insert(QLatin1String(NM_SETTING_802_1X_CA_CERT), setting->cacert());
-  map.insert(QLatin1String(NM_SETTING_802_1X_CA_PATH), setting->capath());
-  map.insert(QLatin1String(NM_SETTING_802_1X_CLIENT_CERT), setting->clientcert());
-  switch (setting->phase1peapver()) {
-    case Security8021xSetting::EnumPhase1peapver::zero:
-      map.insert(QLatin1String(NM_SETTING_802_1X_PHASE1_PEAPVER), "");
-      break;
-    case Security8021xSetting::EnumPhase1peapver::one:
-      map.insert(QLatin1String(NM_SETTING_802_1X_PHASE1_PEAPVER), "");
-      break;
+  if (!setting->eap().isEmpty()) {
+    map.insert("eap", setting->eap());
+  }
+  if (!setting->identity().isEmpty()) {
+    map.insert("identity", setting->identity());
+  }
+  if (!setting->anonymousidentity().isEmpty()) {
+    map.insert(QLatin1String(NM_SETTING_802_1X_ANONYMOUS_IDENTITY), setting->anonymousidentity());
+  }
+  if (!setting->cacert().isEmpty()) {
+    map.insert(QLatin1String(NM_SETTING_802_1X_CA_CERT), setting->cacert());
+  }
+  if (!setting->capath().isEmpty()) {
+    map.insert(QLatin1String(NM_SETTING_802_1X_CA_PATH), setting->capath());
   }
-  map.insert(QLatin1String(NM_SETTING_802_1X_PHASE1_PEAPLABEL), setting->phase1peaplabel());
-  map.insert(QLatin1String(NM_SETTING_802_1X_PHASE1_FAST_PROVISIONING), setting->phase1fastprovisioning());
-  map.insert(QLatin1String(NM_SETTING_802_1X_PHASE2_AUTH), setting->phase2auth());
-  switch (setting->phase2autheap()) {
+  if (!setting->clientcert().isEmpty()) {
+    map.insert(QLatin1String(NM_SETTING_802_1X_CLIENT_CERT), setting->clientcert());
+  }
+  if (setting->eap().contains(QLatin1String("peap"))) {  // just a guess
+    switch (setting->phase1peapver()) {
+      case Security8021xSetting::EnumPhase1peapver::zero:
+        map.insert(QLatin1String(NM_SETTING_802_1X_PHASE1_PEAPVER), "");
+        break;
+      case Security8021xSetting::EnumPhase1peapver::one:
+        map.insert(QLatin1String(NM_SETTING_802_1X_PHASE1_PEAPVER), "");
+        break;
+    }
+    map.insert(QLatin1String(NM_SETTING_802_1X_PHASE1_PEAPLABEL), setting->phase1peaplabel());
+  }
+  if (!setting->phase1fastprovisioning().isEmpty()) {
+    map.insert(QLatin1String(NM_SETTING_802_1X_PHASE1_FAST_PROVISIONING), setting->phase1fastprovisioning());
+  }
+  if (!setting->phase2auth().isEmpty()) {
+    map.insert(QLatin1String(NM_SETTING_802_1X_PHASE2_AUTH), setting->phase2auth());
+    switch (setting->phase2autheap()) {
     case Security8021xSetting::EnumPhase2autheap::pap:
       map.insert(QLatin1String(NM_SETTING_802_1X_PHASE2_AUTHEAP), "");
       break;
@@ -112,14 +129,21 @@
     case Security8021xSetting::EnumPhase2autheap::chap:
       map.insert(QLatin1String(NM_SETTING_802_1X_PHASE2_AUTHEAP), "");
       break;
+    }
+    map.insert(QLatin1String(NM_SETTING_802_1X_PHASE2_CA_CERT), setting->phase2cacert());
+    map.insert(QLatin1String(NM_SETTING_802_1X_PHASE2_CA_PATH), setting->phase2capath());
+    map.insert(QLatin1String(NM_SETTING_802_1X_PHASE2_CLIENT_CERT), setting->phase2clientcert());
+    map.insert(QLatin1String(NM_SETTING_802_1X_PHASE2_PRIVATE_KEY), setting->phase2privatekey());
+  }
+  if (!setting->privatekey().isEmpty()) {
+      map.insert(QLatin1String(NM_SETTING_802_1X_PRIVATE_KEY), setting->privatekey());
+  }
+  if (!setting->pin().isEmpty()) {
+      map.insert("pin", setting->pin());
+  }
+  if (!setting->psk().isEmpty()) {
+      map.insert("psk", setting->psk());
   }
-  map.insert(QLatin1String(NM_SETTING_802_1X_PHASE2_CA_CERT), setting->phase2cacert());
-  map.insert(QLatin1String(NM_SETTING_802_1X_PHASE2_CA_PATH), setting->phase2capath());
-  map.insert(QLatin1String(NM_SETTING_802_1X_PHASE2_CLIENT_CERT), setting->phase2clientcert());
-  map.insert(QLatin1String(NM_SETTING_802_1X_PRIVATE_KEY), setting->privatekey());
-  map.insert(QLatin1String(NM_SETTING_802_1X_PHASE2_PRIVATE_KEY), setting->phase2privatekey());
-  map.insert("pin", setting->pin());
-  map.insert("psk", setting->psk());
   return map;
 }
 
Only in settings: 802-1xdbus.cpp~
Only in settings: 802-1xdbus.cpp.orig
Only in settings: 802-1xdbus.cpp.rej
Only in settings: .802-1xdbus.cpp.rej.swp
Only in settings: .802-1xdbus.cpp.swp
diff -ur origsettings//802-1xdbus.h settings/802-1xdbus.h
--- origsettings//802-1xdbus.h	2009-01-23 18:41:34.000000000 +0100
+++ settings/802-1xdbus.h	2009-01-23 18:17:03.000000000 +0100
@@ -3,7 +3,7 @@
 #ifndef KNM_SECURITY8021XDBUS_H
 #define KNM_SECURITY8021XDBUS_H
 
-#include <nm-setting-802-1x.h>
+#include <nm-setting-8021x.h>
 
 #include <kdebug.h>
 #include <kcoreconfigskeleton.h>
Only in settings: 802-1xdbus.h~
diff -ur origsettings//802-3-ethernet.cpp settings/802-3-ethernet.cpp
--- origsettings//802-3-ethernet.cpp	2009-01-23 18:41:34.000000000 +0100
+++ settings/802-3-ethernet.cpp	2009-01-23 18:17:03.000000000 +0100
@@ -5,7 +5,12 @@
 
 using namespace Knm;
 
-WiredSetting::WiredSetting() : Setting(Setting::Wired)
+WiredSetting::WiredSetting() : Setting(Setting::Wired),
+    mPort(WiredSetting::EnumPort::mii),
+    mDuplex(WiredSetting::EnumDuplex::full),
+    mSpeed(0),
+    mAutonegotiate(true),
+    mMtu(1500)
 {
 }
 
Only in settings: 802-3-ethernet.cpp~
diff -ur origsettings//802-3-ethernetdbus.h settings/802-3-ethernetdbus.h
--- origsettings//802-3-ethernetdbus.h	2009-01-23 18:41:34.000000000 +0100
+++ settings/802-3-ethernetdbus.h	2009-01-23 18:17:03.000000000 +0100
@@ -3,7 +3,7 @@
 #ifndef KNM_WIREDDBUS_H
 #define KNM_WIREDDBUS_H
 
-#include <nm-setting-802-3-ethernet.h>
+#include <nm-setting-wired.h>
 
 #include <kdebug.h>
 #include <kcoreconfigskeleton.h>
Only in settings: 802-3-ethernetdbus.h~
diff -ur origsettings//gsmpersistence.cpp settings/gsmpersistence.cpp
--- origsettings//gsmpersistence.cpp	2009-01-23 18:41:34.000000000 +0100
+++ settings/gsmpersistence.cpp	2009-01-23 18:17:03.000000000 +0100
@@ -18,7 +18,7 @@
 void GsmPersistence::load()
 {
   GsmSetting * setting = static_cast<GsmSetting *>(m_setting);
-  setting->setNumber(m_config->readEntry("number", QLatin1String( "*99#" )));
+  setting->setNumber(m_config->readEntry("number", "*99#"));
   setting->setUsername(m_config->readEntry("username", ""));
   // SECRET
   if (m_storageMode != ConnectionPersistence::Secure) {
Only in settings: gsmpersistence.cpp~
diff -ur origsettings//ipv4.cpp settings/ipv4.cpp
--- origsettings//ipv4.cpp	2009-01-23 18:41:34.000000000 +0100
+++ settings/ipv4.cpp	2009-01-23 18:17:03.000000000 +0100
@@ -5,7 +5,9 @@
 
 using namespace Knm;
 
-Ipv4Setting::Ipv4Setting() : Setting(Setting::Ipv4)
+Ipv4Setting::Ipv4Setting() : Setting(Setting::Ipv4),
+    mMethod(Ipv4Setting::EnumMethod::Automatic),
+    mIgnoredhcpdns(false)
 {
 }
 
Only in settings: ipv4.cpp~
diff -ur origsettings//ipv4dbus.cpp settings/ipv4dbus.cpp
--- origsettings//ipv4dbus.cpp	2009-01-23 18:41:34.000000000 +0100
+++ settings/ipv4dbus.cpp	2009-01-23 18:24:18.000000000 +0100
@@ -17,19 +17,18 @@
 
 void Ipv4Dbus::fromMap(const QVariantMap & map)
 {
-  Ipv4Setting * setting = static_cast<Ipv4Setting *>(m_setting);
-  if (map.contains("method")) {
-    setting->setMethod(map.value("method").value<int>());
-  }
-  if (map.contains("dns")) {
-    setting->setDns(map.value("dns").value<QStringList>());
-  }
-  if (map.contains(QLatin1String(NM_SETTING_IP4_CONFIG_DNS_SEARCH))) {
+  Ipv4Setting * setting = static_cast<Ipv4Setting
+    *>(m_setting); if (map.contains("method")) {
+      setting->setMethod(map.value("method").value<int>()); }
+  //if (map.contains("dns")) { setting->setDns(map.value("dns").value<QStringList>()); }
+  if (map.contains(QLatin1String(NM_SETTING_IP4_CONFIG_DNS_SEARCH)) &&
+      !map.value(QLatin1String(NM_SETTING_IP4_CONFIG_DNS_SEARCH)).value<QStringList>().isEmpty()
+     ) {
     setting->setDnssearch(map.value(QLatin1String(NM_SETTING_IP4_CONFIG_DNS_SEARCH)).value<QStringList>());
   }
-  if (map.contains("addresses")) {
-    setting->setAddresses(map.value("addresses").value<QStringList>());
-  }
+  //if (map.contains("addresses")) {
+  //  setting->setAddresses(map.value("addresses").value<QStringList>());
+  //}
   if (map.contains(QLatin1String(NM_SETTING_IP4_CONFIG_IGNORE_AUTO_DNS))) {
     setting->setIgnoredhcpdns(map.value(QLatin1String(NM_SETTING_IP4_CONFIG_IGNORE_AUTO_DNS)).value<bool>());
   }
@@ -37,6 +36,7 @@
 
 QVariantMap Ipv4Dbus::toMap()
 {
+  kDebug() << "Does not yet support manual IP addresses";
   QVariantMap map;
   Ipv4Setting * setting = static_cast<Ipv4Setting *>(m_setting);
   switch (setting->method()) {
@@ -53,10 +53,14 @@
       map.insert("method", "shared");
       break;
   }
-  map.insert("dns", setting->dns());
-  map.insert(QLatin1String(NM_SETTING_IP4_CONFIG_DNS_SEARCH), setting->dnssearch());
-  map.insert("addresses", setting->addresses());
-  map.insert(QLatin1String(NM_SETTING_IP4_CONFIG_IGNORE_AUTO_DNS), setting->ignoredhcpdns());
+  //map.insert("dns", setting->dns());
+  if (!setting->dnssearch().isEmpty()) {
+    map.insert(QLatin1String(NM_SETTING_IP4_CONFIG_DNS_SEARCH), setting->dnssearch());
+  }
+  if (!setting->addresses().isEmpty()) {
+    map.insert("addresses", setting->addresses());
+  }
+  //map.insert(QLatin1String(NM_SETTING_IP4_CONFIG_IGNORE_AUTO_DNS), setting->ignoredhcpdns());
   return map;
 }
 
Only in settings: ipv4dbus.cpp~
Only in settings: ipv4dbus.cpp.orig
Only in settings: ipv4dbus.cpp.rej
Only in settings: .ipv4dbus.cpp.rej.swp
Only in settings: .ipv4dbus.cpp.swp
diff -ur origsettings//ipv4dbus.h settings/ipv4dbus.h
--- origsettings//ipv4dbus.h	2009-01-23 18:41:34.000000000 +0100
+++ settings/ipv4dbus.h	2009-01-23 18:17:03.000000000 +0100
@@ -3,7 +3,7 @@
 #ifndef KNM_IPV4DBUS_H
 #define KNM_IPV4DBUS_H
 
-#include <nm-setting-ipv4.h>
+#include <nm-setting-ip4-config.h>
 
 #include <kdebug.h>
 #include <kcoreconfigskeleton.h>
Only in settings: ipv4dbus.h~
diff -ur origsettings//serialpersistence.cpp settings/serialpersistence.cpp
--- origsettings//serialpersistence.cpp	2009-01-23 18:41:34.000000000 +0100
+++ settings/serialpersistence.cpp	2009-01-23 18:17:03.000000000 +0100
@@ -20,7 +20,7 @@
   SerialSetting * setting = static_cast<SerialSetting *>(m_setting);
   setting->setBaud(m_config->readEntry("baud", 0));
   setting->setBits(m_config->readEntry("bits", 8));
-  setting->setParity(m_config->readEntry("parity", QLatin1String( "None" )));
+  setting->setParity(m_config->readEntry("parity", "None"));
   setting->setStopbits(m_config->readEntry("stopbits", 1));
   setting->setSenddelay(m_config->readEntry("senddelay", 0));
 }
Only in settings: serialpersistence.cpp~
Only in settings: .svn
