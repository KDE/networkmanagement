// This file is generated by kconfig_compiler from ipv4.kcfg.
// All changes you do to this file will be lost.

#include "ipv4persistence.h"

#include "ipv4.h"

using namespace Knm;

Ipv4Persistence::Ipv4Persistence(Ipv4Setting * setting, KSharedConfig::Ptr config, ConnectionPersistence::SecretStorageMode mode) : SettingPersistence(setting, config, mode)
{
}

Ipv4Persistence::~Ipv4Persistence()
{
}

void Ipv4Persistence::load()
{
  Ipv4Setting * setting = static_cast<Ipv4Setting *>(m_setting);
  {
    QString contents = m_config->readEntry("method", "Automatic");
    if (contents == "Automatic")
      setting->setMethod(Ipv4Setting::EnumMethod::Automatic);
    else     if (contents == "LinkLocal")
      setting->setMethod(Ipv4Setting::EnumMethod::LinkLocal);
    else     if (contents == "Manual")
      setting->setMethod(Ipv4Setting::EnumMethod::Manual);
    else     if (contents == "Shared")
      setting->setMethod(Ipv4Setting::EnumMethod::Shared);

  }
  setting->setDns(m_config->readEntry("dns", QStringList()));
  setting->setDnssearch(m_config->readEntry("dnssearch", QStringList()));
  setting->setAddresses(m_config->readEntry("addresses", QStringList()));
  setting->setIgnoredhcpdns(m_config->readEntry("ignoredhcpdns", false));
}

void Ipv4Persistence::save()
{
  Ipv4Setting * setting = static_cast<Ipv4Setting *>(m_setting);
  switch (setting->method()) {
    case Ipv4Setting::EnumMethod::Automatic:
      m_config->writeEntry("method", "Automatic");
      break;
    case Ipv4Setting::EnumMethod::LinkLocal:
      m_config->writeEntry("method", "LinkLocal");
      break;
    case Ipv4Setting::EnumMethod::Manual:
      m_config->writeEntry("method", "Manual");
      break;
    case Ipv4Setting::EnumMethod::Shared:
      m_config->writeEntry("method", "Shared");
      break;
  }
  m_config->writeEntry("dns", setting->dns());
  m_config->writeEntry("dnssearch", setting->dnssearch());
  m_config->writeEntry("addresses", setting->addresses());
  m_config->writeEntry("ignoredhcpdns", setting->ignoredhcpdns());
}

QMap<QString,QString> Ipv4Persistence::secrets() const
{
  QMap<QString,QString> map;
  return map;
}

void Ipv4Persistence::restoreSecrets(QMap<QString,QString> secrets) const
{
  if (m_storageMode == ConnectionPersistence::Secure) {
  Q_UNUSED(secrets);
  }
}
