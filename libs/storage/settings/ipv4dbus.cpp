// This file is generated by kconfig_compiler from ipv4.kcfg.
// All changes you do to this file will be lost.

#include "ipv4dbus.h"

#include "ipv4.h"

using namespace Knm;

Ipv4Dbus::Ipv4Dbus(Ipv4Setting * setting) : SettingDbus(setting)
{
}

Ipv4Dbus::~Ipv4Dbus()
{
}

void Ipv4Dbus::fromMap(const QVariantMap & map)
{
  Ipv4Setting * setting = static_cast<Ipv4Setting
    *>(m_setting); if (map.contains("method")) {
      setting->setMethod(map.value("method").value<int>()); }
  //if (map.contains("dns")) { setting->setDns(map.value("dns").value<QStringList>()); }
  if (map.contains(QLatin1String(NM_SETTING_IP4_CONFIG_DNS_SEARCH)) &&
      !map.value(QLatin1String(NM_SETTING_IP4_CONFIG_DNS_SEARCH)).value<QStringList>().isEmpty()
     ) {
    setting->setDnssearch(map.value(QLatin1String(NM_SETTING_IP4_CONFIG_DNS_SEARCH)).value<QStringList>());
  }
  //if (map.contains("addresses")) {
  //  setting->setAddresses(map.value("addresses").value<QStringList>());
  //}
  if (map.contains(QLatin1String(NM_SETTING_IP4_CONFIG_IGNORE_AUTO_DNS))) {
    setting->setIgnoredhcpdns(map.value(QLatin1String(NM_SETTING_IP4_CONFIG_IGNORE_AUTO_DNS)).value<bool>());
  }
}

QVariantMap Ipv4Dbus::toMap()
{
  kDebug() << "Does not yet support manual IP addresses";
  QVariantMap map;
  Ipv4Setting * setting = static_cast<Ipv4Setting *>(m_setting);
  switch (setting->method()) {
    case Ipv4Setting::EnumMethod::Automatic:
      map.insert("method", "auto");
      break;
    case Ipv4Setting::EnumMethod::LinkLocal:
      map.insert("method", "link-local");
      break;
    case Ipv4Setting::EnumMethod::Manual:
      map.insert("method", "manual");
      break;
    case Ipv4Setting::EnumMethod::Shared:
      map.insert("method", "shared");
      break;
  }
  //map.insert("dns", setting->dns());
  if (!setting->dnssearch().isEmpty()) {
    map.insert(QLatin1String(NM_SETTING_IP4_CONFIG_DNS_SEARCH), setting->dnssearch());
  }
  if (!setting->addresses().isEmpty()) {
    map.insert("addresses", setting->addresses());
  }
  //map.insert(QLatin1String(NM_SETTING_IP4_CONFIG_IGNORE_AUTO_DNS), setting->ignoredhcpdns());
  return map;
}

QVariantMap Ipv4Dbus::toSecretsMap()
{
  QVariantMap map;
  return map;
}

