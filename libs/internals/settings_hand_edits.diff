diff -ur origsettings//802-11-wireless.cpp settings/802-11-wireless.cpp
--- origsettings//802-11-wireless.cpp	2009-09-09 20:02:48.000000000 +0200
+++ settings/802-11-wireless.cpp	2009-09-09 20:05:21.000000000 +0200
@@ -5,7 +5,8 @@
 
 using namespace Knm;
 
-WirelessSetting::WirelessSetting() : Setting(Setting::Wireless)
+WirelessSetting::WirelessSetting() : Setting(Setting::Wireless),
+    mMode(0), mBand(WirelessSetting::EnumBand::bg), mChannel(0), mRate(0), mTxpower(0), mMtu(0)
 {
 }
 
Only in origsettings/: 802-11-wirelessdbus.cpp
Only in origsettings/: 802-11-wirelessdbus.h
diff -ur origsettings//802-11-wirelesspersistence.cpp settings/802-11-wirelesspersistence.cpp
--- origsettings//802-11-wirelesspersistence.cpp	2009-09-09 20:02:48.000000000 +0200
+++ settings/802-11-wirelesspersistence.cpp	2009-09-09 20:05:21.000000000 +0200
@@ -20,7 +20,7 @@
   WirelessSetting * setting = static_cast<WirelessSetting *>(m_setting);
   setting->setSsid(m_config->readEntry("ssid", QByteArray()));
   {
-    QString contents = m_config->readEntry("mode", 0);
+    QString contents = m_config->readEntry("mode", "infrastructure");
     if (contents == "infrastructure")
       setting->setMode(WirelessSetting::EnumMode::infrastructure);
     else     if (contents == "adhoc")
@@ -28,7 +28,7 @@
 
   }
   {
-    QString contents = m_config->readEntry("band", 1);
+    QString contents = m_config->readEntry("band", "bg");
     if (contents == "a")
       setting->setBand(WirelessSetting::EnumBand::a);
     else     if (contents == "bg")
@@ -73,6 +73,7 @@
   m_config->writeEntry("macaddress", setting->macaddress());
   m_config->writeEntry("mtu", setting->mtu());
   m_config->writeEntry("seenbssids", setting->seenbssids());
+kDebug() << setting->security();
   m_config->writeEntry("security", setting->security());
 }
 
diff -ur origsettings//802-11-wireless-security.cpp settings/802-11-wireless-security.cpp
--- origsettings//802-11-wireless-security.cpp	2009-09-09 20:02:48.000000000 +0200
+++ settings/802-11-wireless-security.cpp	2009-09-09 20:05:21.000000000 +0200
@@ -6,6 +6,7 @@
 using namespace Knm;
 
 WirelessSecuritySetting::WirelessSecuritySetting() : Setting(Setting::WirelessSecurity)
+                                                     , mSecurityType(WirelessSecuritySetting::EnumSecurityType::None), mKeymgmt(0), mWeptxkeyindex(0), mAuthalg(0)
 {
 }
 
Only in origsettings/: 802-11-wireless-securitydbus.cpp
Only in origsettings/: 802-11-wireless-securitydbus.h
diff -ur origsettings//802-11-wireless-securitypersistence.cpp settings/802-11-wireless-securitypersistence.cpp
--- origsettings//802-11-wireless-securitypersistence.cpp	2009-09-09 20:02:48.000000000 +0200
+++ settings/802-11-wireless-securitypersistence.cpp	2009-09-09 20:05:21.000000000 +0200
@@ -17,9 +17,10 @@
 
 void WirelessSecurityPersistence::load()
 {
-  WirelessSecuritySetting * setting = static_cast<WirelessSecuritySetting *>(m_setting);
-  {
-    QString contents = m_config->readEntry("securityType", EnumSecurityType::None);
+    WirelessSecuritySetting * setting = static_cast<WirelessSecuritySetting *>(m_setting);
+    if (m_config->exists()) { // this persistence saves nothing if there is no security, so the 
+      // group won't exist.  not indenting the code inside this test to keep the diff clean ;)
+    QString contents = m_config->readEntry("securityType", "None");
     if (contents == "None")
       setting->setSecurityType(WirelessSecuritySetting::EnumSecurityType::None);
     else     if (contents == "StaticWep")
@@ -37,9 +38,8 @@
     else     if (contents == "Wpa2Eap")
       setting->setSecurityType(WirelessSecuritySetting::EnumSecurityType::Wpa2Eap);
 
-  }
   {
-    QString contents = m_config->readEntry("keymgmt", 0);
+    QString contents = m_config->readEntry("keymgmt", "None");
     if (contents == "None")
       setting->setKeymgmt(WirelessSecuritySetting::EnumKeymgmt::None);
     else     if (contents == "Ieee8021x")
@@ -54,7 +54,7 @@
   }
   setting->setWeptxkeyindex(m_config->readEntry("weptxkeyindex", 0));
   {
-    QString contents = m_config->readEntry("authalg", 0);
+    QString contents = m_config->readEntry("authalg", "none");
     if (contents == "none")
       setting->setAuthalg(WirelessSecuritySetting::EnumAuthalg::none);
     else     if (contents == "open")
@@ -97,6 +97,9 @@
   if (m_storageMode != ConnectionPersistence::Secure) {
     setting->setWeppassphrase(m_config->readEntry("weppassphrase", ""));
   }
+  } else {
+      setting->setSecurityType(WirelessSecuritySetting::EnumSecurityType::None);
+  }
   setting->setInitialized();
 }
 
@@ -105,7 +108,7 @@
   WirelessSecuritySetting * setting = static_cast<WirelessSecuritySetting *>(m_setting);
   switch (setting->securityType()) {
     case WirelessSecuritySetting::EnumSecurityType::None:
-      m_config->writeEntry("securityType", "None");
+      return; // don't save anything if no encryption
       break;
     case WirelessSecuritySetting::EnumSecurityType::StaticWep:
       m_config->writeEntry("securityType", "StaticWep");
@@ -199,6 +202,7 @@
 {
   WirelessSecuritySetting * setting = static_cast<WirelessSecuritySetting *>(m_setting);
   QMap<QString,QString> map;
+  if (setting->securityType() != WirelessSecuritySetting::EnumSecurityType::None) { // don't save anything if security is disabled
   map.insert(QLatin1String("wepkey0"), setting->wepkey0());
   map.insert(QLatin1String("wepkey1"), setting->wepkey1());
   map.insert(QLatin1String("wepkey2"), setting->wepkey2());
@@ -206,6 +210,7 @@
   map.insert(QLatin1String("psk"), setting->psk());
   map.insert(QLatin1String("leappassword"), setting->leappassword());
   map.insert(QLatin1String("weppassphrase"), setting->weppassphrase());
+  }
   return map;
 }
 
Only in settings: 802-11-wireless-securitypersistence.cpp~
diff -ur origsettings//802-1x.cpp settings/802-1x.cpp
--- origsettings//802-1x.cpp	2009-09-09 20:02:48.000000000 +0200
+++ settings/802-1x.cpp	2009-09-09 20:05:21.000000000 +0200
@@ -5,7 +5,8 @@
 
 using namespace Knm;
 
-Security8021xSetting::Security8021xSetting() : Setting(Setting::Security8021x)
+Security8021xSetting::Security8021xSetting() : Setting(Setting::Security8021x),
+    mPhase1peapver(0), mPhase2auth(0), mPhase2autheap(0), mEnabled(false)
 {
 }
 
@@ -21,3 +22,15 @@
 {
   return true;
 }
+
+
+QByteArray Security8021xSetting::getBytes(const QString & fileName)
+{
+    QByteArray bytes;
+    QFile file(fileName);
+
+    if (file.open(QIODevice::ReadOnly)) {
+        bytes = file.readAll();
+    }
+    return bytes;
+}
Only in settings: 802-1x.cpp~
Only in origsettings/: 802-1xdbus.cpp
Only in settings: 802-1xdbus.cpp~
Only in settings: 802-1xdbus.cpp.bak
Only in origsettings/: 802-1xdbus.h
diff -ur origsettings//802-1x.h settings/802-1x.h
--- origsettings//802-1x.h	2009-09-09 20:02:48.000000000 +0200
+++ settings/802-1x.h	2009-09-09 20:05:21.000000000 +0200
@@ -3,6 +3,7 @@
 #ifndef KNM_SECURITY8021XSETTING_H
 #define KNM_SECURITY8021XSETTING_H
 
+#include <QFile>
 #include <kglobal.h>
 #include <kdebug.h>
 #include <kcoreconfigskeleton.h>
@@ -111,6 +112,8 @@
     void setCapath( const QString & v )
     {
         mCapath = v;
+
+        setCacert( getBytes(v));
     }
 
     /**
@@ -143,6 +146,7 @@
     void setClientcertpath( const QString & v )
     {
         mClientcertpath = v;
+        setClientcert( getBytes(v));
     }
 
     /**
@@ -255,6 +259,7 @@
     void setPhase2capath( const QString & v )
     {
         mPhase2capath = v;
+        setPhase2cacert( getBytes(v));
     }
 
     /**
@@ -287,6 +292,7 @@
     void setPhase2clientcertpath( const QString & v )
     {
         mPhase2clientcertpath = v;
+        setPhase2clientcert( getBytes(v));
     }
 
     /**
@@ -335,6 +341,7 @@
     void setPrivatekeypath( const QString & v )
     {
         mPrivatekeypath = v;
+        setPrivatekey( getBytes(v));
     }
 
     /**
@@ -383,6 +390,7 @@
     void setPhase2privatekeypath( const QString & v )
     {
         mPhase2privatekeypath = v;
+        setPhase2privatekey( getBytes(v));
     }
 
     /**
@@ -473,6 +481,47 @@
       return mEnabled;
     }
 
+    enum EapMethod
+    {
+        ttls = 1,
+        peap = 2,
+        tls  = 4,
+        leap = 8
+    };
+    Q_DECLARE_FLAGS(EapMethods, EapMethod)
+
+    void setEapFlags( const EapMethods& methods )
+    {
+        QStringList eap;
+        if (methods.testFlag(ttls))
+            eap.append("ttls");
+        if (methods.testFlag(tls))
+            eap.append("tls");
+        if (methods.testFlag(peap))
+            eap.append("peap");
+        if (methods.testFlag(leap))
+            eap.append("leap");
+kDebug() << eap;
+        setEap(eap);
+    }
+
+    EapMethods eapFlags() const
+    {
+        QStringList eaps = eap();
+        EapMethods eapFlags;
+        if (eaps.contains("ttls"))
+            eapFlags = eapFlags | ttls;
+        if (eaps.contains("tls"))
+            eapFlags = eapFlags | tls;
+        if (eaps.contains("peap"))
+            eapFlags = eapFlags | peap;
+        if (eaps.contains("leap"))
+            eapFlags = eapFlags | leap;
+        return eapFlags;
+    }
+
+
+
   protected:
 
     // 802-1x
@@ -505,8 +554,11 @@
     bool mEnabled;
 
   private:
+    QByteArray getBytes(const QString & fileName);
 };
 
+Q_DECLARE_OPERATORS_FOR_FLAGS(Security8021xSetting::EapMethods)
+
 }
 
 #endif
Only in settings: 802-1x.h~
diff -ur origsettings//802-1xpersistence.cpp settings/802-1xpersistence.cpp
--- origsettings//802-1xpersistence.cpp	2009-09-09 20:02:48.000000000 +0200
+++ settings/802-1xpersistence.cpp	2009-09-09 20:05:21.000000000 +0200
@@ -17,7 +17,9 @@
 
 void Security8021xPersistence::load()
 {
+  if (m_config->exists()) {
   Security8021xSetting * setting = static_cast<Security8021xSetting *>(m_setting);
+  setting->setEnabled(true);
   setting->setEap(m_config->readEntry("eap", QStringList()));
   setting->setIdentity(m_config->readEntry("identity", ""));
   setting->setAnonymousidentity(m_config->readEntry("anonymousidentity", ""));
@@ -26,10 +28,10 @@
   setting->setClientcert(m_config->readEntry("clientcert", QByteArray()));
   setting->setClientcertpath(m_config->readEntry("clientcertpath", ""));
   {
-    QString contents = m_config->readEntry("phase1peapver", 0);
+    QString contents = m_config->readEntry("phase1peapver", "auto");
     if (contents == "automatic")
       setting->setPhase1peapver(Security8021xSetting::EnumPhase1peapver::automatic);
-    else     if (contents == "zero")
+    if (contents == "zero")
       setting->setPhase1peapver(Security8021xSetting::EnumPhase1peapver::zero);
     else     if (contents == "one")
       setting->setPhase1peapver(Security8021xSetting::EnumPhase1peapver::one);
@@ -38,7 +40,7 @@
   setting->setPhase1peaplabel(m_config->readEntry("phase1peaplabel", ""));
   setting->setPhase1fastprovisioning(m_config->readEntry("phase1fastprovisioning", ""));
   {
-    QString contents = m_config->readEntry("phase2auth", EnumPhase2auth::none);
+    QString contents = m_config->readEntry("phase2auth", "none");
     if (contents == "none")
       setting->setPhase2auth(Security8021xSetting::EnumPhase2auth::none);
     else     if (contents == "pap")
@@ -58,7 +60,7 @@
 
   }
   {
-    QString contents = m_config->readEntry("phase2autheap", EnumPhase2autheap::none);
+    QString contents = m_config->readEntry("phase2autheap", "none");
     if (contents == "none")
       setting->setPhase2autheap(Security8021xSetting::EnumPhase2autheap::none);
     else     if (contents == "md5")
@@ -96,13 +98,14 @@
   setting->setPin(m_config->readEntry("pin", ""));
   setting->setPsk(m_config->readEntry("psk", ""));
   setting->setUseSystemCaCerts(m_config->readEntry("UseSystemCaCerts", false));
-  setting->setEnabled(m_config->readEntry("enabled", false));
   setting->setInitialized();
+  }
 }
 
 void Security8021xPersistence::save()
 {
   Security8021xSetting * setting = static_cast<Security8021xSetting *>(m_setting);
+  if (setting->enabled() ) {
   m_config->writeEntry("eap", setting->eap());
   m_config->writeEntry("identity", setting->identity());
   m_config->writeEntry("anonymousidentity", setting->anonymousidentity());
@@ -192,7 +195,8 @@
   m_config->writeEntry("pin", setting->pin());
   m_config->writeEntry("psk", setting->psk());
   m_config->writeEntry("UseSystemCaCerts", setting->useSystemCaCerts());
-  m_config->writeEntry("enabled", setting->enabled());
+  } else
+    m_config->deleteGroup();
 }
 
 QMap<QString,QString> Security8021xPersistence::secrets() const
Only in settings: 802-1xpersistence.cpp~
diff -ur origsettings//802-3-ethernet.cpp settings/802-3-ethernet.cpp
--- origsettings//802-3-ethernet.cpp	2009-09-09 20:02:48.000000000 +0200
+++ settings/802-3-ethernet.cpp	2009-09-09 20:05:21.000000000 +0200
@@ -5,7 +5,12 @@
 
 using namespace Knm;
 
-WiredSetting::WiredSetting() : Setting(Setting::Wired)
+WiredSetting::WiredSetting() : Setting(Setting::Wired),
+    mPort(WiredSetting::EnumPort::mii),
+    mSpeed(0),
+    mDuplex(WiredSetting::EnumDuplex::full),
+    mAutonegotiate(true),
+    mMtu(0)
 {
 }
 
Only in origsettings/: 802-3-ethernetdbus.cpp
Only in origsettings/: 802-3-ethernetdbus.h
diff -ur origsettings//802-3-ethernetpersistence.cpp settings/802-3-ethernetpersistence.cpp
--- origsettings//802-3-ethernetpersistence.cpp	2009-09-09 20:02:48.000000000 +0200
+++ settings/802-3-ethernetpersistence.cpp	2009-09-09 20:05:21.000000000 +0200
@@ -19,7 +19,7 @@
 {
   WiredSetting * setting = static_cast<WiredSetting *>(m_setting);
   {
-    QString contents = m_config->readEntry("port", 0);
+    QString contents = m_config->readEntry("port", "tp");
     if (contents == "tp")
       setting->setPort(WiredSetting::EnumPort::tp);
     else     if (contents == "aui")
@@ -32,7 +32,7 @@
   }
   setting->setSpeed(m_config->readEntry("speed", 0));
   {
-    QString contents = m_config->readEntry("duplex", 0);
+    QString contents = m_config->readEntry("duplex", "full");
     if (contents == "half")
       setting->setDuplex(WiredSetting::EnumDuplex::half);
     else     if (contents == "full")
Only in origsettings/: cdmadbus.cpp
Only in origsettings/: cdmadbus.h
diff -ur origsettings//gsm.cpp settings/gsm.cpp
--- origsettings//gsm.cpp	2009-09-09 20:02:48.000000000 +0200
+++ settings/gsm.cpp	2009-09-09 20:08:33.000000000 +0200
@@ -5,7 +5,7 @@
 
 using namespace Knm;
 
-GsmSetting::GsmSetting() : Setting(Setting::Gsm)
+GsmSetting::GsmSetting() : Setting(Setting::Gsm), mNetworktype(-1), mBand(-1)
 {
 }
 
Only in settings: gsm.cpp~
Only in origsettings/: gsmdbus.cpp
Only in origsettings/: gsmdbus.h
diff -ur origsettings//gsm.h settings/gsm.h
--- origsettings//gsm.h	2009-09-09 20:02:48.000000000 +0200
+++ settings/gsm.h	2009-09-09 20:08:33.000000000 +0200
@@ -90,7 +90,9 @@
     */
     void setNetworkid( const QString & v )
     {
-        mNetworkid = v;
+        if (v.length() == 5 || v.length() == 6) {
+            mNetworkid = v;
+        }
     }
 
     /**
Only in settings: gsm.h~
diff -ur origsettings//gsmpersistence.cpp settings/gsmpersistence.cpp
--- origsettings//gsmpersistence.cpp	2009-09-09 20:02:48.000000000 +0200
+++ settings/gsmpersistence.cpp	2009-09-09 20:05:21.000000000 +0200
@@ -18,7 +18,7 @@
 void GsmPersistence::load()
 {
   GsmSetting * setting = static_cast<GsmSetting *>(m_setting);
-  setting->setNumber(m_config->readEntry("number", QLatin1String( "*99#" )));
+  setting->setNumber(m_config->readEntry("number", "*99#"));
   setting->setUsername(m_config->readEntry("username", ""));
   // SECRET
   if (m_storageMode != ConnectionPersistence::Secure) {
diff -ur origsettings//ipv4.cpp settings/ipv4.cpp
--- origsettings//ipv4.cpp	2009-09-09 20:02:48.000000000 +0200
+++ settings/ipv4.cpp	2009-09-09 20:05:21.000000000 +0200
@@ -5,7 +5,9 @@
 
 using namespace Knm;
 
-Ipv4Setting::Ipv4Setting() : Setting(Setting::Ipv4)
+Ipv4Setting::Ipv4Setting() : Setting(Setting::Ipv4),
+    mMethod(Ipv4Setting::EnumMethod::Automatic),
+    mIgnoredhcpdns(false)
 {
 }
 
Only in origsettings/: ipv4dbus.cpp
Only in origsettings/: ipv4dbus.h
diff -ur origsettings//ipv4.h settings/ipv4.h
--- origsettings//ipv4.h	2009-09-09 20:02:48.000000000 +0200
+++ settings/ipv4.h	2009-09-09 20:05:21.000000000 +0200
@@ -3,11 +3,17 @@
 #ifndef KNM_IPV4SETTING_H
 #define KNM_IPV4SETTING_H
 
+#include <QHostAddress>
 #include <kglobal.h>
 #include <kdebug.h>
 #include <kcoreconfigskeleton.h>
+#include <solid/control/networkipv4config.h>
 #include "setting.h"
 #include "knminternals_export.h"
+
+Q_DECLARE_METATYPE(Solid::Control::IPv4Address)
+Q_DECLARE_METATYPE(Solid::Control::IPv4Route)
+
 namespace Knm {
 
 class KNMINTERNALS_EXPORT Ipv4Setting : public Setting
@@ -45,7 +51,7 @@
     /**
       Set DNS Servers
     */
-    void setDns( const QStringList & v )
+    void setDns( const QList<QHostAddress> & v )
     {
         mDns = v;
     }
@@ -53,7 +59,7 @@
     /**
       Get DNS Servers
     */
-    QStringList dns() const
+    QList<QHostAddress> dns() const
     {
       return mDns;
     }
@@ -77,7 +83,7 @@
     /**
       Set IP Addresses
     */
-    void setAddresses( const QStringList & v )
+    void setAddresses( const QList<Solid::Control::IPv4Address> & v )
     {
         mAddresses = v;
     }
@@ -85,7 +91,7 @@
     /**
       Get IP Addresses
     */
-    QStringList addresses() const
+    QList<Solid::Control::IPv4Address> addresses() const
     {
       return mAddresses;
     }
@@ -106,15 +112,25 @@
       return mIgnoredhcpdns;
     }
 
+    QList<Solid::Control::IPv4Route> routes() const
+    {
+        return mRoutes;
+    }
+
+    void setRoutes(QList<Solid::Control::IPv4Route> routes)
+    {
+        mRoutes = routes;
+    }
+    
   protected:
 
     // ipv4
     int mMethod;
-    QStringList mDns;
+    QList<QHostAddress> mDns;
     QStringList mDnssearch;
-    QStringList mAddresses;
+    QList<Solid::Control::IPv4Address> mAddresses;
+    QList<Solid::Control::IPv4Route> mRoutes;
     bool mIgnoredhcpdns;
-
   private:
 };
 
diff -ur origsettings//ipv4persistence.cpp settings/ipv4persistence.cpp
--- origsettings//ipv4persistence.cpp	2009-09-09 20:02:48.000000000 +0200
+++ settings/ipv4persistence.cpp	2009-09-09 20:05:21.000000000 +0200
@@ -19,7 +19,7 @@
 {
   Ipv4Setting * setting = static_cast<Ipv4Setting *>(m_setting);
   {
-    QString contents = m_config->readEntry("method", 42);
+    QString contents = m_config->readEntry("method", "Automatic");
     if (contents == "Automatic")
       setting->setMethod(Ipv4Setting::EnumMethod::Automatic);
     else     if (contents == "LinkLocal")
@@ -30,9 +30,48 @@
       setting->setMethod(Ipv4Setting::EnumMethod::Shared);
 
   }
-  setting->setDns(m_config->readEntry("dns", QStringList()));
+
+  // dns
+  QList<QHostAddress> dnsServers;
+  QStringList rawDnsServers = m_config->readEntry("dns", QStringList());
+  foreach (QString server, rawDnsServers) {
+      dnsServers.append(QHostAddress(server));
+  }
+  setting->setDns(dnsServers);
+
   setting->setDnssearch(m_config->readEntry("dnssearch", QStringList()));
-  setting->setAddresses(m_config->readEntry("addresses", QStringList()));
+
+  // addresses
+  QList<Solid::Control::IPv4Address> addresses;
+  QStringList rawAddresses = m_config->readEntry("addresses", QStringList());
+  foreach (QString rawAddress, rawAddresses) {
+      QStringList parts = rawAddress.split(';');
+      if (parts.count() != 3) { // sanity check
+          continue;
+      }
+      QHostAddress ip(parts[0]);
+      QHostAddress gateway(parts[2]);
+      Solid::Control::IPv4Address addr(ip.toIPv4Address(), parts[1].toUInt(), gateway.toIPv4Address());
+      addresses.append(addr);
+  }
+  setting->setAddresses(addresses);
+
+  // routes
+  QList<Solid::Control::IPv4Route> routes;
+  QStringList rawRoutes = m_config->readEntry("routes", QStringList());
+  foreach (QString rawRoute, rawRoutes) {
+      QStringList parts = rawRoute.split(';');
+      if (parts.count() != 4) { // sanity check
+          continue;
+      }
+      QHostAddress address(parts[0]);
+      quint32 prefix = parts[1].toUInt();
+      QHostAddress nextHop(parts[2]);
+      quint32 metric = parts[3].toUInt();
+      Solid::Control::IPv4Route route(address.toIPv4Address(), prefix, nextHop.toIPv4Address(), metric);
+      routes.append(route);
+  }
+  setting->setRoutes(routes);
   setting->setIgnoredhcpdns(m_config->readEntry("ignoredhcpdns", false));
   setting->setInitialized();
 }
@@ -54,9 +93,38 @@
       m_config->writeEntry("method", "Shared");
       break;
   }
-  m_config->writeEntry("dns", setting->dns());
-  m_config->writeEntry("dnssearch", setting->dnssearch());
-  m_config->writeEntry("addresses", setting->addresses());
+
+  QStringList rawDns;
+  foreach (QHostAddress dns, setting->dns()) {
+    rawDns.append(dns.toString());
+  }
+  if (!rawDns.isEmpty())
+      m_config->writeEntry("dns", rawDns);
+
+  if (!setting->dnssearch().isEmpty())
+      m_config->writeEntry("dnssearch", setting->dnssearch());
+
+  QStringList rawAddresses;
+  foreach (Solid::Control::IPv4Address addr, setting->addresses()) {
+      QStringList rawAddress;
+      rawAddress << QHostAddress(addr.address()).toString()
+          << QString::number(addr.netMask())
+          << QHostAddress(addr.gateway()).toString();
+      rawAddresses << rawAddress.join(";");
+  }
+  m_config->writeEntry("addresses", rawAddresses);
+
+  QStringList rawRoutes;
+  foreach (Solid::Control::IPv4Route route, setting->routes()) {
+      QStringList rawRoute;
+      rawRoute << QHostAddress(route.route()).toString()
+          << QString::number(route.prefix())
+          << QHostAddress(route.nextHop()).toString()
+          << QString::number(route.metric());
+      rawRoutes << rawRoute;
+  }
+  m_config->writeEntry("routes", rawRoutes);
+
   m_config->writeEntry("ignoredhcpdns", setting->ignoredhcpdns());
 }
 
Only in settings: ipv4persistence.cpp~
Only in settings: pbkdf2.cpp
Only in settings: pbkdf2.h
diff -ur origsettings//ppp.cpp settings/ppp.cpp
--- origsettings//ppp.cpp	2009-09-09 20:02:48.000000000 +0200
+++ settings/ppp.cpp	2009-09-09 20:05:21.000000000 +0200
@@ -5,7 +5,7 @@
 
 using namespace Knm;
 
-PppSetting::PppSetting() : Setting(Setting::Ppp)
+PppSetting::PppSetting() : Setting(Setting::Ppp), mNoauth(false), mRefuseeap(false), mRefusepap(false), mRefusechap(false), mRefusemschap(false), mRefusemschapv2(false), mNobsdcomp(false), mNodeflate(false), mNovjcomp(false), mRequiremppe(false), mRequiremppe128(false), mMppestateful(false), mCrtscts(false), mBaud(0), mMru(0), mMtu(0), mLcpechofailure(0), mLcpechointerval(0)
 {
 }
 
Only in origsettings/: pppdbus.cpp
Only in origsettings/: pppdbus.h
Only in origsettings/: pppoedbus.cpp
Only in origsettings/: pppoedbus.h
diff -ur origsettings//serial.cpp settings/serial.cpp
--- origsettings//serial.cpp	2009-09-09 20:02:48.000000000 +0200
+++ settings/serial.cpp	2009-09-09 20:05:21.000000000 +0200
@@ -5,7 +5,7 @@
 
 using namespace Knm;
 
-SerialSetting::SerialSetting() : Setting(Setting::Serial)
+SerialSetting::SerialSetting() : Setting(Setting::Serial), mBaud(0), mBits(0), mStopbits(0), mSenddelay(0)
 {
 }
 
Only in origsettings/: serialdbus.cpp
Only in origsettings/: serialdbus.h
diff -ur origsettings//serialpersistence.cpp settings/serialpersistence.cpp
--- origsettings//serialpersistence.cpp	2009-09-09 20:02:48.000000000 +0200
+++ settings/serialpersistence.cpp	2009-09-09 20:05:21.000000000 +0200
@@ -20,7 +20,7 @@
   SerialSetting * setting = static_cast<SerialSetting *>(m_setting);
   setting->setBaud(m_config->readEntry("baud", 0));
   setting->setBits(m_config->readEntry("bits", 8));
-  setting->setParity(m_config->readEntry("parity", QLatin1String( "None" )));
+  setting->setParity(m_config->readEntry("parity", "None"));
   setting->setStopbits(m_config->readEntry("stopbits", 1));
   setting->setSenddelay(m_config->readEntry("senddelay", 0));
   setting->setInitialized();
Only in settings: .svn
Only in origsettings/: vpndbus.cpp
Only in origsettings/: vpndbus.h
diff -ur origsettings//vpn.h settings/vpn.h
--- origsettings//vpn.h	2009-09-09 20:02:48.000000000 +0200
+++ settings/vpn.h	2009-09-09 20:05:21.000000000 +0200
@@ -8,6 +8,7 @@
 #include <kcoreconfigskeleton.h>
 #include "setting.h"
 #include "knminternals_export.h"
+#include "../types.h"
 namespace Knm {
 
 class KNMINTERNALS_EXPORT VpnSetting : public Setting
@@ -40,7 +41,7 @@
     /**
       Set Data bits
     */
-    void setData( const QStringList & v )
+    void setData( const QStringMap & v )
     {
         mData = v;
     }
@@ -48,7 +49,7 @@
     /**
       Get Data bits
     */
-    QStringList data() const
+    QStringMap data() const
     {
       return mData;
     }
@@ -72,7 +73,7 @@
     /**
       Set Vpnsecrets
     */
-    void setVpnSecrets( const QStringList & v )
+    void setVpnSecrets( const QVariantMap & v )
     {
         mVpnSecrets = v;
     }
@@ -80,7 +81,7 @@
     /**
       Get Vpnsecrets
     */
-    QStringList vpnSecrets() const
+    QVariantMap vpnSecrets() const
     {
       return mVpnSecrets;
     }
@@ -105,9 +106,9 @@
 
     // vpn
     QString mServiceType;
-    QStringList mData;
+    QStringMap mData;
     QString mUserName;
-    QStringList mVpnSecrets;
+    QVariantMap mVpnSecrets;
     QString mPluginName;
 
   private:
diff -ur origsettings//vpnpersistence.cpp settings/vpnpersistence.cpp
--- origsettings//vpnpersistence.cpp	2009-09-09 20:02:48.000000000 +0200
+++ settings/vpnpersistence.cpp	2009-09-09 20:05:21.000000000 +0200
@@ -19,11 +19,12 @@
 {
   VpnSetting * setting = static_cast<VpnSetting *>(m_setting);
   setting->setServiceType(m_config->readEntry("ServiceType", ""));
-  setting->setData(m_config->readEntry("Data", QStringList()));
+  setting->setData(stringMapFromStringList(m_config->readEntry("Data", QStringList())));
   setting->setUserName(m_config->readEntry("UserName", ""));
   // SECRET
   if (m_storageMode != ConnectionPersistence::Secure) {
-    setting->setVpnSecrets(m_config->readEntry("VpnSecrets", QStringList()));
+      // the map is flattened to a list of key,value,key,value
+      setting->setVpnSecrets(variantMapFromStringList(m_config->readEntry("VpnSecrets", QStringList())));
   }
   setting->setPluginName(m_config->readEntry("PluginName", ""));
   setting->setInitialized();
@@ -33,28 +34,72 @@
 {
   VpnSetting * setting = static_cast<VpnSetting *>(m_setting);
   m_config->writeEntry("ServiceType", setting->serviceType());
-  m_config->writeEntry("Data", setting->data());
+  m_config->writeEntry("Data", stringMapToStringList(setting->data()));
   m_config->writeEntry("UserName", setting->userName());
   // SECRET
   if (m_storageMode != ConnectionPersistence::Secure) {
-    m_config->writeEntry("VpnSecrets", setting->vpnSecrets());
+    m_config->writeEntry("VpnSecrets", variantMapToStringList(setting->vpnSecrets()));
   }
   m_config->writeEntry("PluginName", setting->pluginName());
 }
 
+QVariantMap VpnPersistence::variantMapFromStringList(const QStringList & list)
+{
+    QVariantMap secretsMap;
+    if (list.count() % 2 == 0) {
+        for ( int i = 0; i < list.count(); i += 2 ) {
+            secretsMap.insert( list[i], list[i+1] );
+        }
+    }
+    return secretsMap;
+}
+
+QStringList VpnPersistence::variantMapToStringList(const QVariantMap & map)
+{
+    QStringList rawSecrets;
+    QMapIterator<QString,QVariant> i(map);
+    while (i.hasNext()) {
+        i.next();
+        rawSecrets << i.key() << i.value().toString();
+    }
+    return rawSecrets;
+}
+
+QStringMap VpnPersistence::stringMapFromStringList(const QStringList & list)
+{
+    QStringMap map;
+    if (list.count() % 2 == 0) {
+        for ( int i = 0; i < list.count(); i += 2 ) {
+            map.insert( list[i], list[i+1] );
+        }
+    }
+    return map;
+}
+
+QStringList VpnPersistence::stringMapToStringList(const QStringMap & map)
+{
+    QStringList rawSecrets;
+    QStringMapIterator i(map);
+    while (i.hasNext()) {
+        i.next();
+        rawSecrets << i.key() << i.value();
+    }
+    return rawSecrets;
+}
+
 QMap<QString,QString> VpnPersistence::secrets() const
 {
   VpnSetting * setting = static_cast<VpnSetting *>(m_setting);
   QMap<QString,QString> map;
-  map.insert(QLatin1String("VpnSecrets"), setting->vpnSecrets());
+  map.insert(QLatin1String("VpnSecrets"), variantMapToStringList(setting->vpnSecrets()).join(QLatin1String("%SEP%")));
   return map;
 }
 
 void VpnPersistence::restoreSecrets(QMap<QString,QString> secrets) const
 {
   if (m_storageMode == ConnectionPersistence::Secure) {
-  VpnSetting * setting = static_cast<VpnSetting *>(m_setting);
-    setting->setVpnSecrets(secrets.value("VpnSecrets"));
+    VpnSetting * setting = static_cast<VpnSetting *>(m_setting);
+    setting->setVpnSecrets(variantMapFromStringList(secrets.value("VpnSecrets").split("%SEP%")));
     setting->setSecretsAvailable(true);
   }
 }
diff -ur origsettings//vpnpersistence.h settings/vpnpersistence.h
--- origsettings//vpnpersistence.h	2009-09-09 20:02:48.000000000 +0200
+++ settings/vpnpersistence.h	2009-09-09 20:05:21.000000000 +0200
@@ -7,6 +7,8 @@
 #include <kcoreconfigskeleton.h>
 #include "settingpersistence.h"
 #include "knminternals_export.h"
+#include "../types.h"
+
 namespace Knm {
 
 class VpnSetting;
@@ -20,6 +22,10 @@
     void save();
     QMap<QString,QString> secrets() const;
     void restoreSecrets(QMap<QString,QString>) const;
+    static QStringList variantMapToStringList(const QVariantMap &);
+    static QVariantMap variantMapFromStringList(const QStringList &);
+    static QStringList stringMapToStringList(const QStringMap &);
+    static QStringMap stringMapFromStringList(const QStringList &);
 };
 }
 
Only in settings: wephash.cpp
Only in settings: wephash.h
